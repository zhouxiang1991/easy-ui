@import "../common/function.scss";
@import "../common/variables.scss";
@import "./config.scss";

/* Placeholder
 -------------------------- */
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

/* BEM
 -------------------------- */
// block
@mixin block($block) {
  $B: $component-prefix + $hyphen + $block !global;

  .#{$B} {
    @content;
  }
}

// element
@mixin el($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector +
      "." +
      $B +
      $element-separator +
      $unit +
      ","};
  }

    @at-root {
      #{$currentSelector} {
        @content;
      }
    }

  // @if hitAllSpecialNestRule($selector) {
  //   @at-root {
  //     #{$selector} {
  //       #{$currentSelector} {
  //         @content;
  //       }
  //     }
  //   }
  // } @else {
  //   @at-root {
  //     #{$currentSelector} {
  //       @content;
  //     }
  //   }
  // }
}

// modifier
@mixin modifier($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector +
      & +
      $modifier-separator +
      $unit +
      ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

// status
@mixin is($statusName) {
  $currentSelector: $status-prefix + "-" + $statusName;

  &.#{$currentSelector} {
    @content;
  }
}

// 伪类
@mixin pseudo($pseudo) {
  $selector: '';
  @each $i in $pseudo {
    $selector: #{&}#{":#{$i}"}, #{$selector}
  }

  @at-root { 
    #{$selector} {
      @content;
    }
  }
}

// 伪元素
@mixin pseudo-el($pseudo) {
  $selector: '';
  @each $i in $pseudo {
    $selector: #{&}#{"::#{$i}"}, #{$selector}
  }

  @at-root { 
    #{$selector} {
      @content;
    }
  }
}
